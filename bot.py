from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
import datetime
from config import BOT_TOKEN, ADMIN_IDS
from database import Database
from qr_manager import generate_qr_code, parse_qr_data, read_qr_from_image
from keyboards import *
import asyncio


def get_coffee_progress(current, total):
    """–°–æ–∑–¥–∞–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –∏–∑ —á–∞—à–µ–∫ –∫–æ—Ñ–µ"""
    filled = min(current, total)
    
    if filled >= total:
        # –í—Å–µ 7 —á–∞—à–µ–∫ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã - –ø–æ–¥–∞—Ä–æ–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω
        return "‚òï" * total
    else:
        empty = total - 1 - filled  # 6 –∫–ª–µ—Ç–æ–∫ + 1 –ø–æ–¥–∞—Ä–æ—á–Ω–∞—è
        progress = "‚òï" * filled     # –ó–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —á–∞—à–∫–∏
        progress += "‚óª" * empty     # –ü—É—Å—Ç—ã–µ –∫–ª–µ—Ç–∫–∏ –¥–æ –ø–æ–¥–∞—Ä–∫–∞
        progress += "‚ö™"             # –ü–æ–¥–∞—Ä–æ—á–Ω–∞—è —á–∞—à–∫–∞ (7-—è)
        return progress


async def notify_customer(bot, customer_id, new_count, required):
    remaining = max(0, required - new_count)
    
    # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
    progress_bar = get_coffee_progress(new_count, required)
    
    # –û–¢–ü–†–ê–í–õ–Ø–ï–ú –°–¢–ò–ö–ï–† –ö–õ–ò–ï–ù–¢–£
 # –û–¢–ü–†–ê–í–õ–Ø–ï–ú –°–¢–ò–ö–ï–† –ö–õ–ò–ï–ù–¢–£ (–∏—Å—á–µ–∑–∞–µ—Ç —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥)
    try:
        sticker_msg = await bot.send_sticker(customer_id, "CAACAgIAAxkBAAIBFWkB1x0GehJqP7TlF0tWTroGbzgHAAKRfAACc7LwS5RnG-NFfOfvNgQ")
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        async def delete_sticker():
            await asyncio.sleep(4)
            try:
                await sticker_msg.delete()
            except Exception:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –≤ —Ñ–æ–Ω–µ
        asyncio.create_task(delete_sticker())
    
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä –∫–ª–∏–µ–Ω—Ç—É {customer_id}: {e}")

    await asyncio.sleep(3)

    # –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    # –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if new_count == 0:
    # –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        full_progress = "‚òï" * required
        progress_msg = await bot.send_message(customer_id, f"{full_progress}")
        await asyncio.sleep(1)
        await progress_msg.delete()
    
        await bot.send_message(
            customer_id,
        "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –Ω–∞–ø–∏—Ç–æ–∫ –≤ –ø–æ–¥–∞—Ä–æ–∫ –≤–∞—à! –ü–æ–∫–∞–∂–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–∞—Ä–∏—Å—Ç–∞."
    )
    else:
        if remaining == 1:
            message = f"‚úî +1 –∫ –≤–∞—à–µ–π –∫–∞—Ä—Ç–µ\n\n{progress_bar}\n\n–°–ª–µ–¥—É—é—â–∏–π –Ω–∞–ø–∏—Ç–æ–∫ –≤ –ø–æ–¥–∞—Ä–æ–∫"
        else:
            message = f"‚úî +1 –∫ –≤–∞—à–µ–π –∫–∞—Ä—Ç–µ\n\n{progress_bar}"
    
        await bot.send_message(customer_id, message)

async def get_sticker_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –ª—é–±–æ–≥–æ —Å—Ç–∏–∫–µ—Ä–∞"""
    await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Ç–∏–∫–µ—Ä —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ ID")

# –ò –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å—Ç–∏–∫–µ—Ä–æ–≤ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç—É –∂–µ –ª–æ–≥–∏–∫—É
async def handle_sticker(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID —Å—Ç–∏–∫–µ—Ä–∞"""
    sticker = update.message.sticker
    sticker_id = sticker.file_id
    
    await update.message.reply_text(
        f"üì¶ ID —Å—Ç–∏–∫–µ—Ä–∞:\n`{sticker_id}`\n\n"
        f"üé≠ –≠–º–æ–¥–∑–∏: {sticker.emoji or '–Ω–µ—Ç'}\n"
        f"üìè –ù–∞–±–æ—Ä: {sticker.set_name or '–Ω–µ—Ç'}",
        parse_mode='Markdown'
    )
db = Database()

# ================== –°–ò–°–¢–ï–ú–ê –°–û–°–¢–û–Ø–ù–ò–ô ==================
def set_user_state(context, state):
    context.user_data['state'] = state

def get_user_state(context):
    return context.user_data.get('state', 'main')

def is_admin(user_id):
    return user_id in ADMIN_IDS     # ‚Üê —Å–ø–∏—Å–æ–∫ –∏–∑ config.py

def get_user_role(user_id, username):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if is_admin(user_id):
        return 'admin'
    elif username and db.is_user_barista(username):
        return 'barista'
    else:
        return 'client'

# ================== –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ ==================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = user.id

    db.get_or_create_user(user_id, user.username, user.first_name, user.last_name)
    set_user_state(context, 'main')
    
    role = get_user_role(user_id, user.username)
    
    if role == 'admin':
        await show_admin_main(update)
    elif role == 'barista':
        await show_barista_main(update)
    else:
        await show_client_main(update, context)  # ‚Üê –î–û–ë–ê–í–¨–¢–ï context –∑–¥–µ—Å—å
    print(f"üîç user_id={user_id}, username=@{user.username}")
    print(f"üì® —Ä–æ–ª—å={get_user_role(user_id, user.username)}")
# ================== –†–ï–ñ–ò–ú –ö–õ–ò–ï–ù–¢–ê ==================
async def show_client_main(update: Update, context: ContextTypes.DEFAULT_TYPE = None):
    user = update.effective_user
    user_id = user.id
    role = get_user_role(user.id, user.username)

    text = """
ü§é –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CoffeeRina (bot)!
    """

    keyboard = get_client_keyboard_with_back() if role == 'admin' else get_client_keyboard()

    if update.message:
        await update.message.reply_text(text, reply_markup=keyboard)
    else:
        await update.callback_query.edit_message_text(text, reply_markup=keyboard)
    
    # –î–û–ë–ê–í–¨–¢–ï –≠–¢–û–¢ –ë–õ–û–ö: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ QR-–∫–æ–¥–∞ –∫–ª–∏–µ–Ω—Ç—É
    if role == 'client' or (role == 'admin' and context and get_user_state(context) == 'client_mode'):
        # –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π QR-–∫–æ–¥–∞
        await asyncio.sleep(1.5)
        await send_qr_code(update, user_id)

async def handle_client_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user_id = update.effective_user.id
    
    if text == "üì± –ú–æ–π QR":
        await send_qr_code(update, user_id)
    elif text == "üéÅ –ê–∫—Ü–∏–∏":
        await show_promotion_info(update)
    elif text == "üîô –ù–∞–∑–∞–¥" and is_admin(user_id):
        set_user_state(context, 'main')
        await show_admin_main(update)

# ================== –†–ï–ñ–ò–ú –ë–ê–†–ò–°–¢–´ ==================
async def show_barista_main(update: Update):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –±–∞—Ä–∏—Å—Ç—ã —Å —Ä–∞–∑–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞ –∏ –±–∞—Ä–∏—Å—Ç—ã"""
    user = update.effective_user
    role = get_user_role(user.id, user.username)
    
    text = """
üêæ –ü—Ä–∏–≤–µ—Ç –±–∞—Ä–∏—Å—Ç–∞! –û—Ç–ø—Ä–∞–≤—å QR
    """
    
    if role == 'admin':
        # –ê–¥–º–∏–Ω –≤–∏–¥–∏—Ç –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if update.message:
            await update.message.reply_text(text, reply_markup=get_barista_keyboard_with_back())
        else:
            await update.callback_query.edit_message_text(text, reply_markup=get_barista_keyboard_with_back())
    else:
        # –ë–∞—Ä–∏—Å—Ç–∞ –≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        if update.message:
            await update.message.reply_text(text, reply_markup=get_barista_keyboard())
        else:
            await update.callback_query.edit_message_text(text, reply_markup=get_barista_keyboard())


async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å QR-–∫–æ–¥–æ–º –î–õ–Ø –ë–ê–†–ò–°–¢–´"""
    user_id = update.effective_user.id
    username = update.effective_user.username
    state = get_user_state(context)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–∞—Ä–∏—Å—Ç–∞ –ò–õ–ò –∞–¥–º–∏–Ω –≤ —Ä–µ–∂–∏–º–µ –±–∞—Ä–∏—Å—Ç—ã
    role = get_user_role(user_id, username)
    
    if role != 'barista' and not (role == 'admin' and state == 'barista_mode'):
        await update.message.reply_text("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –±–∞—Ä–∏—Å—Ç–∞–º")
        return
    
    try:
        photo = update.message.photo[-1]
        photo_file = await photo.get_file()
        photo_bytes = await photo_file.download_as_bytearray()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é QR-–∫–æ–¥..." —á—Ç–æ–±—ã –ø–æ—Ç–æ–º —É–¥–∞–ª–∏—Ç—å
        processing_msg = await update.message.reply_text("üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é QR-–∫–æ–¥...")
        
        # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º QR-–∫–æ–¥
        qr_data = read_qr_from_image(bytes(photo_bytes))
        if not qr_data:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å QR-–∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω—è—Ç—å —Ñ–æ—Ç–æ –ª—É—á—à–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –≤—Ä—É—á–Ω—É—é: coffeerina:123456")
            await processing_msg.delete()  # ‚Üê –£–î–ê–õ–Ø–ï–ú —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–±—Ä–∞–±–æ—Ç–∫–µ
            return
        
        customer_id = parse_qr_data(qr_data)
        if not customer_id:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ QR-–∫–æ–¥–∞")
            await processing_msg.delete()  # ‚Üê –£–î–ê–õ–Ø–ï–ú —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–±—Ä–∞–±–æ—Ç–∫–µ
            return
        

        await update.message.delete()

        await processing_msg.delete()

        await process_customer_scan(update, context, customer_id)

    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {e}")
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–±—Ä–∞–±–æ—Ç–∫–µ - —É–¥–∞–ª—è–µ–º –µ–≥–æ
        if 'processing_msg' in locals():
            await processing_msg.delete()

async def process_customer_scan(update: Update, context: ContextTypes.DEFAULT_TYPE, customer_id: int):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
    # –î–û–ë–ê–í–õ–ï–ù–û: –ø–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = update.effective_user.id
    username = update.effective_user.username
    state = get_user_state(context)
    role = get_user_role(user_id, username)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
    purchases = db.get_user_stats(customer_id)
    if purchases is None:
        await update.message.reply_text("‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        
        # –î–û–ë–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç –¥–ª—è –±–∞—Ä–∏—Å—Ç—ã
        if role == 'barista' or (role == 'admin' and state == 'barista_mode'):
            set_user_state(context, 'main')
        else:
            set_user_state(context, 'main')
        return
    
    # –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
    cursor = db.conn.cursor()
    cursor.execute('SELECT username, first_name, last_name FROM users WHERE user_id = ?', (customer_id,))
    user_info = cursor.fetchone()
    
    username = user_info[0] if user_info and user_info[0] else "–ù–µ —É–∫–∞–∑–∞–Ω"
    first_name = user_info[1] if user_info and user_info[1] else ""
    last_name = user_info[2] if user_info and user_info[2] else ""
    
    user_display_name = f"@{username}" if username != "–ù–µ —É–∫–∞–∑–∞–Ω" else f"{first_name} {last_name}".strip()
    if not user_display_name:
        user_display_name = "–ì–æ—Å—Ç—å"
    
    promotion = db.get_promotion()
    required = promotion[2] if promotion else 7
    
    # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
    progress_bar = get_coffee_progress(purchases, required)

    # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –±–∞—Ä–∏—Å—Ç—ã
    if purchases >= required:
        text = f"{user_display_name}\n\n{progress_bar}\nüéâ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –Ω–∞–ø–∏—Ç–æ–∫ –¥–æ—Å—Ç—É–ø–µ–Ω!"
    else:
        text = f"{user_display_name}\n\n{progress_bar}"
    
    context.user_data['current_customer'] = customer_id
    set_user_state(context, 'barista_action')
    
    keyboard = [
        [KeyboardButton("‚úÖ –ó–∞—Å—á–∏—Ç–∞—Ç—å –ø–æ–∫—É–ø–∫—É")],
        [KeyboardButton("üîô –ù–∞–∑–∞–¥")]
    ]
    
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(text, reply_markup=reply_markup)

# ================== –†–ï–ñ–ò–ú –ê–î–ú–ò–ù–ê ==================
async def show_admin_main(update: Update):
    text = """
üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ CoffeeRina
    """
    if update.message:
        await update.message.reply_text(text, reply_markup=get_admin_main_keyboard())
    else:
        await update.callback_query.edit_message_text(text, reply_markup=get_admin_main_keyboard())

async def handle_admin_main(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    
    if text == "üë• –ë–∞—Ä–∏—Å—Ç—ã":
        set_user_state(context, 'admin_barista')
        await show_barista_management(update)
    elif text == "üë§ –ü–æ—Å–µ—Ç–∏—Ç–µ–ª–∏":
        set_user_state(context, 'admin_customers')
        await show_all_customers(update)
    elif text == "üì£ –†–∞—Å—Å—ã–ª–∫–∞":  # ‚Üê –î–û–ë–ê–í–ò–¢–¨ –≠–¢–û
        set_user_state(context, 'broadcast_message')
        await update.message.reply_text("‚úç –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
    elif text == "‚öôÔ∏è –û–ø—Ü–∏–∏":
        set_user_state(context, 'admin_settings')
        await show_admin_settings(update)

# ================== –†–ê–°–°–´–õ–ö–ê ==================
async def handle_broadcast_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if get_user_state(context) != 'broadcast_message':
        return
    
    # –ï–°–õ–ò —ç—Ç–æ –∫–Ω–æ–ø–∫–∞ - –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏
    if update.message.text in ["üë• –ë–∞—Ä–∏—Å—Ç—ã", "üë§ –ü–æ—Å–µ—Ç–∏—Ç–µ–ª–∏", "‚öôÔ∏è –û–ø—Ü–∏–∏", "üì£ –†–∞—Å—Å—ã–ª–∫–∞", "üîô –ù–∞–∑–∞–¥"]:
        set_user_state(context, 'main')
        await handle_admin_main(update, context)
        return
    
    broadcast_text = update.message.text
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        set_user_state(context, 'main')
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    context.user_data['broadcast_text'] = broadcast_text
    context.user_data['admin_chat_id'] = user_id
    
    # –ü–†–ï–î–ü–†–û–°–ú–û–¢–† —Å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞–º–∏
    preview_text = f"{broadcast_text}"
    
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="broadcast_send"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="broadcast_cancel")
        ]
    ]
    
    preview_msg = await update.message.reply_text(
        preview_text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    
    context.user_data['preview_msg_id'] = preview_msg.message_id
    set_user_state(context, 'broadcast_preview')

async def handle_broadcast_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    data = query.data
    user_id = query.from_user.id
    
    if not is_admin(user_id):
        await query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return
    
    if data == "broadcast_send":
        await send_broadcast_to_users(update, context)
    elif data == "broadcast_cancel":
        await query.edit_message_text("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        set_user_state(context, 'main')
    elif data == "broadcast_delete":
        await delete_broadcast_from_users(update, context)

async def send_broadcast_to_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    query = update.callback_query
    broadcast_text = context.user_data.get('broadcast_text')
    
    if not broadcast_text:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º "–æ—Ç–ø—Ä–∞–≤–∫–∞..."
    await query.edit_message_text(
        f"üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏...\n\n{broadcast_text}"
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    all_user_ids = db.get_all_user_ids()
    sent_count = 0
    failed_count = 0
    sent_messages = []  # –°–æ—Ö—Ä–∞–Ω—è–µ–º (user_id, message_id)
    
    admin_id = context.user_data.get('admin_chat_id')
    
    for customer_id in all_user_ids:
        if customer_id == admin_id:
            continue
            
        try:
            sent_msg = await context.bot.send_message(
                chat_id=customer_id,
                text=broadcast_text
            )
            sent_count += 1
            sent_messages.append((customer_id, sent_msg.message_id))
        except Exception as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {customer_id}: {e}")
            failed_count += 1
        await asyncio.sleep(0.1)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    if sent_messages:
        context.user_data['last_broadcast'] = {
            'messages': sent_messages,
            'text': broadcast_text
            # –£–±—Ä–∞–ª–∏ timestamp - –æ–Ω –Ω–µ –Ω—É–∂–µ–Ω –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
        }
        
        # –û–ë–ù–û–í–õ–Ø–ï–ú –°–£–©–ï–°–¢–í–£–Æ–©–ï–ï —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π —É–¥–∞–ª–µ–Ω–∏—è
        result_text = (
            f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\n"
            f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n"
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å: {failed_count}\n\n"
            f"–¢–µ–∫—Å—Ç: {broadcast_text}"
        )
        
        keyboard = [[
            InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —É –≤—Å–µ—Ö", callback_data="broadcast_delete")
        ]]
        
        # –û–ë–ù–û–í–õ–Ø–ï–ú —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
        await query.edit_message_text(
            result_text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    else:
        await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
    
    set_user_state(context, 'main')

async def delete_broadcast_from_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª—è–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    query = update.callback_query
    await query.answer()
    
    broadcast_data = context.user_data.get('last_broadcast')
    if not broadcast_data:
        await query.edit_message_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ä–∞—Å—Å—ã–ª–∫–µ")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º "—É–¥–∞–ª–µ–Ω–∏–µ..."
    await query.edit_message_text("üîÑ –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    
    deleted_count = 0
    for user_id, message_id in broadcast_data['messages']:
        try:
            await context.bot.delete_message(chat_id=user_id, message_id=message_id)
            deleted_count += 1
        except Exception as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —É {user_id}: {e}")
        await asyncio.sleep(0.1)
    
    await query.edit_message_text(
        f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å–æ–æ–±—â–µ–Ω–∏–π —Ä–∞—Å—Å—ã–ª–∫–∏\n"
        f"–¢–µ–∫—Å—Ç: {broadcast_data['text']}"
    )
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    context.user_data.pop('last_broadcast', None)
    
async def show_barista_management(update: Update):
    baristas = db.get_all_baristas()
    text = "üìú –°–ø–∏—Å–æ–∫ –±–∞—Ä–∏—Å—Ç:\n\n"

    if baristas:
        for barista in baristas:
            username = barista[0]          # ‚Üê —Ç–æ–ª—å–∫–æ username
            text += f"@{username}\n"
    else:
        text += "–ë–∞—Ä–∏—Å—Ç—ã –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã"

    text += "\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    await update.message.reply_text(text, reply_markup=get_admin_barista_keyboard())
async def show_customer_management(update: Update):
    text = "üìí –ü–æ—Å–µ—Ç–∏—Ç–µ–ª–∏\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞–º–∏"
    await update.message.reply_text(text, reply_markup=get_admin_customers_keyboard())
async def show_all_customers(update: Update):
    print('[DEBUG] show_all_customers –≤—ã–∑–≤–∞–Ω–∞')
    users = db.get_all_users()  # ‚Üê –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ database.py
    promotion = db.get_promotion()
    required = promotion[2] if promotion else 7

    if not users:
        text = "üìÇ –ö–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç."
    else:
        text = "üìí –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
        for u in users:
            user_id, username, first_name, last_name, purchases = u
            print(f"[DEBUG] user_id={user_id}, username='{username}', first_name='{first_name}', last_name='{last_name}'")
            name = f"@{username}" if username else f"{first_name or ''} {last_name or ''}".strip() or f"–ì–æ—Å—Ç—å (id:{user_id})"
            text += f"{name}, {purchases}/{required}\n"
            
    await update.message.reply_text(
    text,
    reply_markup=get_admin_customers_keyboard_after_list()  # –∫–Ω–æ–ø–∫–∞ ¬´–ù–∞–π—Ç–∏¬ª + ¬´–ù–∞–∑–∞–¥¬ª
    )
async def show_admin_settings(update: Update):
    promotion = db.get_promotion()
    text = f"""
‚öôÔ∏è –û–ø—Ü–∏–∏

–¢–µ–∫—É—â–∞—è –∞–∫—Ü–∏—è: {promotion[1] if promotion else '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞'}
–£—Å–ª–æ–≤–∏–µ: {promotion[2] if promotion else 7} –ø–æ–∫—É–ø–æ–∫ ‚Üí –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –Ω–∞–ø–∏—Ç–æ–∫

–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:
    """
    await update.message.reply_text(text, reply_markup=get_admin_settings_keyboard())

async def handle_admin_barista_management(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    
    if text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å":
        set_user_state(context, 'adding_barista')
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ @username –±–∞—Ä–∏—Å—Ç—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è (–±–µ–∑ @):")
    elif text == "‚ûñ –£–¥–∞–ª–∏—Ç—å":
        set_user_state(context, 'removing_barista')
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ @username –±–∞—Ä–∏—Å—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–±–µ–∑ @):")
    elif text == "üìã –°–ø–∏—Å–æ–∫":
        await show_barista_management(update)
    elif text == "üîô –ù–∞–∑–∞–¥":
        set_user_state(context, 'main')
        await show_admin_main(update)

async def handle_admin_customer_management(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    print("DEBUG admin_customers text:", text)   # ‚Üê –¥–æ–±–∞–≤—å —Å—é–¥–∞

    if text == "üîç –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è":
        print("DEBUG: –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")   # ‚Üê –∏ —Å—é–¥–∞
        set_user_state(context, 'finding_customer_by_username')
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ @username –≥–æ—Å—Ç—è (–±–µ–∑ @):")
        return

    # –æ—Å—Ç–∞–ª—å–Ω—ã–µ elif...

async def handle_admin_settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    
    if text == "üìù –ò–∑–º–µ–Ω–∏—Ç—å –∞–∫—Ü–∏–∏":
        set_user_state(context, 'promotion_management')
        await show_promotion_management(update)
    elif text == "ü§é –Ø –≥–æ—Å—Ç—å":
        set_user_state(context, 'client_mode')
        await show_client_main(update, context)  # ‚Üê –î–û–ë–ê–í–¨–¢–ï context
    elif text == "üêæ –Ø –±–∞—Ä–∏—Å—Ç–∞":
        set_user_state(context, 'barista_mode')
        await show_barista_main(update)
    elif text == "üîô –ù–∞–∑–∞–¥":
        set_user_state(context, 'main')
        await show_admin_main(update)

async def show_promotion_management(update: Update):
    promotion = db.get_promotion()
    text = f"""
üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ü–∏—è–º–∏

–¢–µ–∫—É—â–∞—è –∞–∫—Ü–∏—è: {promotion[1]}
–£—Å–ª–æ–≤–∏–µ: –∫–∞–∂–¥—ã–µ {promotion[2]} –ø–æ–∫—É–ø–æ–∫
–û–ø–∏—Å–∞–Ω–∏–µ: {promotion[3] if promotion[3] else '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}

–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å:
    """
    await update.message.reply_text(text, reply_markup=get_admin_promotion_keyboard())

async def handle_promotion_management(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    print(f"[DEBUG] promotion_management —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏: '{text}'")

    # --- –Ω–æ–≤–æ–µ –ø—Ä–æ—Å—Ç–æ–µ —É—Å–ª–æ–≤–∏–µ ---
    if "–£—Å–ª–æ–≤–∏–µ" in text:
        print("[DEBUG] –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –£—Å–ª–æ–≤–∏–µ")
        set_user_state(context, 'changing_promotion_condition')
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–æ–∫ –¥–ª—è –∞–∫—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 7):")
        return
    elif "–ù–∞–∑–≤–∞–Ω–∏–µ" in text:
        set_user_state(context, 'changing_promotion_name')
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ü–∏–∏:")
        return

    elif "–û–ø–∏—Å–∞–Ω–∏–µ" in text:
        set_user_state(context, 'changing_promotion_description')
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∞–∫—Ü–∏–∏:")
        return
    elif text == "üîô –ù–∞–∑–∞–¥":
        set_user_state(context, 'admin_settings')
        await show_admin_settings(update)

# ================== –û–ë–†–ê–ë–û–¢–ö–ê –ü–û–ò–°–ö–ê –ö–õ–ò–ï–ù–¢–ê ==================
async def handle_customer_search(update: Update, context: ContextTypes.DEFAULT_TYPE, search_query: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ @username"""
    
    # –£–±–∏—Ä–∞–µ–º –ø–æ–∏—Å–∫ –ø–æ ID, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ username
    username_input = search_query.replace('@', '').strip()
    
    if not username_input:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π @username")
        set_user_state(context, 'admin_customers')
        return
    
    # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username
    user_data = db.get_user_by_username_exact(username_input)
    
    if user_data:
        customer_id, username, first_name, last_name = user_data
        purchases = db.get_user_stats(customer_id)
        promotion = db.get_promotion()
        required = promotion[2] if promotion else 7
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ –∏–º—è
        user_display_name = f"@{username}" if username else f"{first_name} {last_name}".strip()
        if not user_display_name:
            user_display_name = "–ì–æ—Å—Ç—å"
        
        text = f"""
üìã –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:

üë§ {user_display_name}
üìä –ü–æ–∫—É–ø–æ–∫: {purchases}/{required}
üéØ –î–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –Ω–∞–ø–∏—Ç–∫–∞: {max(0, required - purchases)}

{'üéâ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –Ω–∞–ø–∏—Ç–æ–∫ –¥–æ—Å—Ç—É–ø–µ–Ω!' if purchases >= required else '–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!'}
        """
        
        # ‚Üê –í–°–¢–ê–í–ò–¢–¨ –°–Æ–î–ê ‚Üì‚Üì‚Üì
        keyboard = [
            [
                InlineKeyboardButton("‚ûï –ù–∞—á–∏—Å–ª–∏—Ç—å", callback_data=f"add_{customer_id}"),
                InlineKeyboardButton("‚ûñ –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"remove_{customer_id}")
            ],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_customers")]
        ]
        await update.message.reply_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    else:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    set_user_state(context, 'admin_customers')
# ================== –û–ë–†–ê–ë–û–¢–ö–ê CALLBACK QUERIES ==================
async def handle_callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    data = query.data
    if data.startswith('broadcast_'):
        await handle_broadcast_buttons(update, context)
        return
    # –ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ - –µ—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å —Å—Ç–∞—Ä—ã–µ callback'–∏, –ø—Ä–æ—Å—Ç–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –∏—Ö
    if data.startswith('add_') or data.startswith('remove_') or data.startswith('cancel_') or data == 'cancel':
        await query.edit_message_text("üîÑ –≠—Ç–æ –º–µ–Ω—é —É—Å—Ç–∞—Ä–µ–ª–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.")
        set_user_state(context, 'main')
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        user = query.from_user
        role = get_user_role(user.id, user.username)
        
        if role == 'barista':
            await show_barista_main(update)
        elif role == 'admin':
            await show_admin_main(update)
        else:
            await show_client_main(update)
# ================== –ë–ê–ó–û–í–´–ï –§–£–ù–ö–¶–ò–ò ==================
async def send_qr_code(update: Update, user_id: int):
    qr_image = generate_qr_code(user_id)
    caption = "üì± –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π QR-–∫–æ–¥\n\n–ü–æ–∫–∞–∂–∏—Ç–µ –µ–≥–æ –±–∞—Ä–∏—Å—Ç–µ –ø—Ä–∏ –∑–∞–∫–∞–∑–µ –Ω–∞–ø–∏—Ç–∫–∞"
    await update.message.reply_photo(photo=qr_image, caption=caption)

async def show_user_status(update: Update, user_id: int):
    purchases = db.get_user_stats(user_id)
    promotion = db.get_promotion()
    required = promotion[2] if promotion else 7
    remaining = max(0, required - purchases)
    
    text = f"""
üìä –í–∞—à —Å—Ç–∞—Ç—É—Å:

–ü–æ–∫—É–ø–æ–∫: {purchases}/{required}
–î–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –Ω–∞–ø–∏—Ç–∫–∞: {remaining}

{'üéâ –°–ª–µ–¥—É—é—â–∏–π –Ω–∞–ø–∏—Ç–æ–∫ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π!' if purchases >= required else '–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!'}
    """
    await update.message.reply_text(text)

async def show_promotion_info(update: Update):
    promotion = db.get_promotion()
    user_id = update.effective_user.id
    purchases = db.get_user_stats(user_id)
    required = promotion[2] if promotion else 7
    remaining = max(0, required - purchases)

    if promotion:
        text = (
            f"üéÅ {promotion[1]}\n\n"
            f"{promotion[3] if promotion[3] else '–ü–æ–∫–∞–∂–∏—Ç–µ QR-–∫–æ–¥ –ø—Ä–∏ –∫–∞–∂–¥–æ–π –ø–æ–∫—É–ø–∫–µ'}\n\n"
            f"üìä –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å: {purchases}/{required}\n"
            f"üéØ –î–æ –Ω–∞–ø–∏—Ç–∫–∞ –≤ –ø–æ–¥–∞—Ä–æ–∫: {remaining}"
        )
        if purchases >= required:
            text += "\n\nüéâ –°–ª–µ–¥—É—é—â–∏–π –Ω–∞–ø–∏—Ç–æ–∫ –≤ –ø–æ–¥–∞—Ä–æ–∫!"
    else:
        text = "–ê–∫—Ü–∏—è –µ—â—ë –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞"

    await update.message.reply_text(text)

async def show_barista_promotion_info(update: Update):
    promotion = db.get_promotion()
    if promotion:
        text = f"""
üéÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫—Ü–∏–∏:

{promotion[1]}
{promotion[3] if promotion[3] else '–ö–ª–∏–µ–Ω—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç QR-–∫–æ–¥ –ø—Ä–∏ –∫–∞–∂–¥–æ–π –ø–æ–∫—É–ø–∫–µ'}

–£—Å–ª–æ–≤–∏–µ: {promotion[2]} –ø–æ–∫—É–ø–æ–∫ ‚Üí –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –Ω–∞–ø–∏—Ç–æ–∫

üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:
1. –ö–ª–∏–µ–Ω—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç QR-–∫–æ–¥
2. –í—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Ñ–æ—Ç–æ QR –≤ —ç—Ç–æ—Ç —á–∞—Ç
3. –ù–∞–∂–∏–º–∞–µ—Ç–µ "‚úÖ –ó–∞—Å—á–∏—Ç–∞—Ç—å –ø–æ–∫—É–ø–∫—É"
4. –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—á–µ—Ç—á–∏–∫
        """
    else:
        text = "–ê–∫—Ü–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞"
    
    await update.message.reply_text(text)

# ================== –ì–õ–ê–í–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–û–û–ë–©–ï–ù–ò–ô ==================
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    state = get_user_state(context)
    text = update.message.text
    user_id = update.effective_user.id
    username = update.effective_user.username
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    role = get_user_role(user_id, username)

    print(f"üî¥ DEBUG –í–•–û–î: text='{text}', state='{state}', role='{role}'")
    
    print(f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ: '{text}', —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {state}, —Ä–æ–ª—å: {role}")
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –≤ —Ä–µ–∂–∏–º–µ –±–∞—Ä–∏—Å—Ç—ã (–¥–ª—è –∞–¥–º–∏–Ω–∞)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é –±–∞—Ä–∏—Å—Ç–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞
    if state == 'admin_barista':
        if text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å":
            set_user_state(context, 'adding_barista')
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ @username –±–∞—Ä–∏—Å—Ç—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è (–±–µ–∑ @):")
        elif text == "‚ûñ –£–¥–∞–ª–∏—Ç—å":
            set_user_state(context, 'removing_barista')
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ @username –±–∞—Ä–∏—Å—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–±–µ–∑ @):")
        elif text == "üìã –°–ø–∏—Å–æ–∫":
            await show_barista_management(update)
        elif text == "üîô –ù–∞–∑–∞–¥":
            set_user_state(context, 'main')
            await show_admin_main(update)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –≤–≤–æ–¥–∞
    if state == 'adding_barista':
        username_input = text.replace('@', '').strip()
        if username_input and username_input not in ['‚ûï –î–æ–±–∞–≤–∏—Ç—å', '‚ûñ –£–¥–∞–ª–∏—Ç—å', 'üìã –°–ø–∏—Å–æ–∫', 'üîô –ù–∞–∑–∞–¥']:
            if db.add_barista(username_input, "–ë–∞—Ä–∏—Å—Ç–∞", ""):
                await update.message.reply_text(f"‚úÖ –ë–∞—Ä–∏—Å—Ç–∞ @{username_input} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –±–∞—Ä–∏—Å—Ç—ã")
            set_user_state(context, 'admin_barista')
            await show_barista_management(update)
        else:
            await handle_admin_barista_management(update, context)
        return
    
    elif state == 'removing_barista':
        username_input = text.replace('@', '').strip()
        if username_input and username_input not in ['‚ûï –î–æ–±–∞–≤–∏—Ç—å', '‚ûñ –£–¥–∞–ª–∏—Ç—å', 'üìã –°–ø–∏—Å–æ–∫', 'üîô –ù–∞–∑–∞–¥']:
            if db.remove_barista(username_input):
                await update.message.reply_text(f"‚úÖ –ë–∞—Ä–∏—Å—Ç–∞ @{username_input} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
            else:
                await update.message.reply_text("‚ùå –ë–∞—Ä–∏—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            set_user_state(context, 'admin_barista')
            await show_barista_management(update)
        else:
            await handle_admin_barista_management(update, context)
        return
    
    elif state == 'finding_customer':
        await handle_customer_search(update, context, text)
        return
    elif state == 'finding_customer_by_username':
        await handle_customer_by_username(update, context)
        return
    elif state == 'changing_promotion_condition':
        try:
            new_condition = int(text)
            if 1 <= new_condition <= 20:
                db.update_promotion(required_purchases=new_condition)
                await update.message.reply_text(f"‚úÖ –£—Å–ª–æ–≤–∏–µ –∞–∫—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {new_condition} –ø–æ–∫—É–ø–æ–∫!")
            else:
                await update.message.reply_text("‚ùå –ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 20")
        except ValueError:
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
        set_user_state(context, 'promotion_management')
        await show_promotion_management(update)
        return
    
    elif state == 'broadcast_message':
        await handle_broadcast_message(update, context)
        return
    
    elif state == 'changing_promotion_description':
        if text and text not in ['üìù –ù–∞–∑–≤–∞–Ω–∏–µ', '–£—Å–ª–æ–≤–∏–µ', 'üìñ –û–ø–∏—Å–∞–Ω–∏–µ', 'üîô –ù–∞–∑–∞–¥']:
            db.update_promotion(description=text)
            await update.message.reply_text("‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –∞–∫—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
            set_user_state(context, 'promotion_management')
            await show_promotion_management(update)
        else:
            await handle_promotion_management(update, context)
        return
    elif state == 'changing_promotion_name':
        if text and text not in ['üìù –ù–∞–∑–≤–∞–Ω–∏–µ', '–£—Å–ª–æ–≤–∏–µ', 'üìñ –û–ø–∏—Å–∞–Ω–∏–µ', 'üîô –ù–∞–∑–∞–¥']:
            db.update_promotion(name=text)
            await update.message.reply_text("‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
            set_user_state(context, 'promotion_management')
            await show_promotion_management(update)
        else:
            await handle_promotion_management(update, context)
        return
    elif state == 'changing_promotion_condition':
        try:
            new_condition = int(text)
            if 1 <= new_condition <= 20:
                db.update_promotion(required_purchases=new_condition)
                await update.message.reply_text(f"‚úÖ –£—Å–ª–æ–≤–∏–µ –∞–∫—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {new_condition} –ø–æ–∫—É–ø–æ–∫!")
                set_user_state(context, 'promotion_management')
                await show_promotion_management(update)
            else:
                await update.message.reply_text("‚ùå –ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 20")
        except ValueError:
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
        return
    
    elif state == 'barista_mode':
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ –≤ —Ä–µ–∂–∏–º–µ –±–∞—Ä–∏—Å—Ç—ã
        print(f"üîç DEBUG: –ê–¥–º–∏–Ω –≤ —Ä–µ–∂–∏–º–µ –±–∞—Ä–∏—Å—Ç—ã –Ω–∞–∂–∞–ª '{text}'")
        if text == "üéü –ê–∫—Ü–∏–∏":
            await show_barista_promotion_info(update)
        elif text == "üîô –ù–∞–∑–∞–¥":
            set_user_state(context, 'admin_settings')
            await show_admin_settings(update)
        else:
            await update.message.reply_text("üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ QR-–∫–æ–¥–∞ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
        return
    
    elif state == 'barista_action':
        if text == "‚úÖ –ó–∞—Å—á–∏—Ç–∞—Ç—å –ø–æ–∫—É–ø–∫—É":
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "‚úÖ –ó–∞—Å—á–∏—Ç–∞—Ç—å –ø–æ–∫—É–ø–∫—É"
            await update.message.delete()
    
            customer_id = context.user_data.get('current_customer')
            if customer_id:
                new_count = db.update_user_purchases(customer_id, 1)
                promotion = db.get_promotion()
                required = promotion[2] if promotion else 7

                progress_bar = get_coffee_progress(new_count, required)
                if new_count >= required:
                    text = f"‚úÖ –ü–æ–∫—É–ø–∫–∞ –∑–∞—Å—á–∏—Ç–∞–Ω–∞!\n\n{progress_bar}\nüéâ –ö–ª–∏–µ–Ω—Ç –ø–æ–ª—É—á–∏–ª –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –Ω–∞–ø–∏—Ç–æ–∫!"
                else:
                    text = f"‚úÖ –ü–æ–∫—É–ø–∫–∞ –∑–∞—Å—á–∏—Ç–∞–Ω–∞!\n\n{progress_bar}\n–î–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –Ω–∞–ø–∏—Ç–∫–∞: {max(0, required - new_count)}"
                await update.message.reply_text(text)
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
                await notify_customer(context.bot, customer_id, new_count, required)
    
            # –í–°–ï–ì–î–ê –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é –±–∞—Ä–∏—Å—Ç—ã –ø–æ—Å–ª–µ –∑–∞—Å—á–∏—Ç—ã–≤–∞–Ω–∏—è –ø–æ–∫—É–ø–∫–∏
                if role == 'barista':
                    set_user_state(context, 'main')
                    await show_barista_main(update)
                else:
                    set_user_state(context, 'barista_mode')
                    await show_barista_main(update)
                return
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

        elif text == "‚ûñ –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∫—É–ø–∫—É":
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "‚ûñ –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∫—É–ø–∫—É"
            await update.message.delete()
        
            customer_id = context.user_data.get('current_customer')
            if customer_id:
                new_count = db.update_user_purchases(customer_id, -1)
                promotion = db.get_promotion()
                required = promotion[2] if promotion else 7
    
            # –î–û–ë–ê–í–¨–¢–ï –í–ò–ó–£–ê–õ–¨–ù–´–ô –ü–†–û–ì–†–ï–°–° –ò –ó–î–ï–°–¨
                progress_bar = get_coffee_progress(new_count, required)
                if new_count >= required:
                    text = f"‚ûñ –ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞!\n\n{progress_bar}\nüéâ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –Ω–∞–ø–∏—Ç–æ–∫ –¥–æ—Å—Ç—É–ø–µ–Ω!"
                else:
                    text = f"‚ûñ –ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞!\n\n{progress_bar}\n–î–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –Ω–∞–ø–∏—Ç–∫–∞: {max(0, required - new_count)}"
        
                await update.message.reply_text(text)
                if role == 'barista':
                    set_user_state(context, 'main')
                    await show_barista_main(update)
                else:
                    set_user_state(context, 'barista_mode')
                    await show_barista_main(update)
                return
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

    # ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–Ω–æ–ø–∫–∏ (üîô –ù–∞–∑–∞–¥ –∏ —Ç.–¥.) ...

    elif state == 'admin_customer_actions':
        print(f"[DEBUG] admin_customer_actions text='{update.message.text}'")
        customer_id = context.user_data.get('current_customer')
        print(f"[DEBUG] current_customer={customer_id}")

        promotion = db.get_promotion()
        required = promotion[2] if promotion else 7

        if text.startswith("‚ûï"):
            print("[DEBUG] –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ ‚ûï")
            new_count = db.update_user_purchases(customer_id, 1)
            print(f"[DEBUG] –Ω–æ–≤—ã–π —Å—á—ë—Ç—á–∏–∫ = {new_count}")
        elif text.startswith("‚ûñ"):
            print("[DEBUG] –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ ‚ûñ")
            new_count = db.update_user_purchases(customer_id, -1)
            print(f"[DEBUG] –Ω–æ–≤—ã–π —Å—á—ë—Ç—á–∏–∫ = {new_count}")
        elif text.startswith("üîô"):
            print("[DEBUG] –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ üîô")
            set_user_state(context, 'admin_customers')
            await show_customer_management(update)
            return
        else:
            print(f"[DEBUG] –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞: '{text}'")
            return

        # ‚¨á‚¨á‚¨á –û–ë–ù–û–í–õ–Ø–ï–ú –∫–∞—Ä—Ç–æ—á–∫—É –∏ –û–°–¢–ê–Å–ú–°–Ø –¢–£–¢ –∂–µ ‚¨á‚¨á‚¨á
        name = f"@{context.user_data.get('current_username') or '–ì–æ—Å—Ç—å'}"
        msg = f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ!\n\nüë§ {name}\nüìä –ù–æ–≤—ã–π —Å—á—ë—Ç—á–∏–∫: {new_count}/{required}\nüéØ –î–æ –ø–æ–¥–∞—Ä–∫–∞: {max(0, required - new_count)}"
        if new_count == 0:
            msg += "\n\nüéâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –Ω–∞–ø–∏—Ç–æ–∫!"

        keyboard = [
            [KeyboardButton("‚ûï –ù–∞—á–∏—Å–ª–∏—Ç—å")],
            [KeyboardButton("‚ûñ –û—Ç–º–µ–Ω–∏—Ç—å")],
            [KeyboardButton("üîô –ù–∞–∑–∞–¥")]
        ]
        await update.message.reply_text(msg, reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))
        # ‚¨á‚¨á‚¨á –ù–ï –≤—ã—Ö–æ–¥–∏–º ‚Äì –æ—Å—Ç–∞—ë–º—Å—è –≤ admin_customer_actions ‚¨á‚¨á‚¨á
        # –ù–ï –≤—ã–∑—ã–≤–∞–µ–º set_user_state –∏ show_customer_management
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –≤ —Ä–∞–∑–Ω—ã—Ö —Ä–µ–∂–∏–º–∞—Ö
    if text == "üîô –ù–∞–∑–∞–¥":
        if state in ['client_mode', 'barista_mode']:
            set_user_state(context, 'main')
            await show_admin_main(update)
            return
        elif state == 'admin_barista':
            set_user_state(context, 'main')
            await show_admin_main(update)
            return
        elif state == 'admin_customers':
            if text == "–ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è":  # ‚Üê –ü–†–û–°–¢–û–ô –¢–ï–ö–°–¢
                set_user_state(context, 'finding_customer_by_username')
                await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ @username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ @):")
            elif text == "üîç –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è":
                set_user_state(context, 'finding_customer_by_username')
                await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ @username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ @):")
                return
            elif text == "üîô –ù–∞–∑–∞–¥":
                set_user_state(context, 'main')
                await show_admin_main(update)
            return
        elif state == 'admin_settings':
            set_user_state(context, 'main')
            await show_admin_main(update)
            return
        
        elif state == 'main' and role == 'admin':
            # –ï—Å–ª–∏ —É–∂–µ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –∞–¥–º–∏–Ω–∞, –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º
            await show_admin_main(update)
            return
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ —Ä–æ–ª—è–º –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º
    # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ —Ä–æ–ª—è–º –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º
    if state == 'main':
        if role == 'admin' and state != 'barista_mode':
        # ‚Üê –î–û–õ–ñ–ù–´ –ë–´–¢–¨ –í–°–ï –≠–¢–ò –ö–ù–û–ü–ö–ò:
            if text == "üë• –ë–∞—Ä–∏—Å—Ç—ã":
                set_user_state(context, 'admin_barista')
                await show_barista_management(update)
                return
            elif text == "üë§ –ü–æ—Å–µ—Ç–∏—Ç–µ–ª–∏":
                print("[DEBUG] –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ü–æ—Å–µ—Ç–∏—Ç–µ–ª–∏")
                set_user_state(context, 'admin_customers')
                await show_all_customers(update)
                return
            elif text == "üì£ –†–∞—Å—Å—ã–ª–∫–∞":  # ‚Üê –≠–¢–ê –°–¢–†–û–ö–ê –î–û–õ–ñ–ù–ê –ë–´–¢–¨
                set_user_state(context, 'broadcast_message')
                await update.message.reply_text("‚úç –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
                return
            elif text == "‚öôÔ∏è –û–ø—Ü–∏–∏":
                set_user_state(context, 'admin_settings')
                await show_admin_settings(update)
                return
            else:
                await handle_admin_main(update, context)
        
        elif role == 'barista' or (role == 'admin' and state == 'barista_mode'):  # ‚Üê –ò–ó–ú–ï–ù–ò–¢–ï –≠–¢–£ –°–¢–†–û–ö–£
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ê–∫—Ü–∏–∏" –¥–ª—è –±–∞—Ä–∏—Å—Ç—ã
            print(f"üîç DEBUG: –ë–∞—Ä–∏—Å—Ç–∞ –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É '{text}', —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {state}")
            if text == "üéü –ê–∫—Ü–∏–∏":
                await show_barista_promotion_info(update)
            elif text == "üîô –ù–∞–∑–∞–¥" and role == 'admin':
                set_user_state(context, 'admin_settings')
                await show_admin_settings(update)
            else:
        # –ï—Å–ª–∏ –±–∞—Ä–∏—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–∫—Å—Ç (–Ω–µ –∫–Ω–æ–ø–∫—É), –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
                await update.message.reply_text("üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ QR-–∫–æ–¥–∞ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
            return

        else:
            await handle_client_mode(update, context)
    
    elif state == 'client_mode':
        await handle_client_mode(update, context)
    
    elif state == 'admin_barista':
        await handle_admin_barista_management(update, context)
    
    elif state == 'admin_customers':
        await handle_admin_customer_management(update, context)
    
    elif state == 'admin_settings':
        await handle_admin_settings(update, context)
    
    elif state == 'promotion_management':
        await handle_promotion_management(update, context)
        return
    elif state == 'finding_customer_by_username':
        await handle_customer_by_username(update, context)
        return
    else:
        set_user_state(context, 'main')
        await start(update, context)

async def cmd_backup(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ–∑–¥–∞—ë—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–¥–º–∏–Ω—É —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ë–î"""
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    try:
        path = db.backup_db()  # —Å–æ–∑–¥–∞—ë–º –∫–æ–ø–∏—é
        await update.message.reply_document(
            document=open(path, 'rb'),
            caption=f"üì¶ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –ë–î\nüìÖ {datetime.datetime.now():%d.%m.%Y %H:%M}"
        )
        db.cleanup_old_backups(7)   # –æ—Å—Ç–∞–≤–ª—è–µ–º 7 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫–æ–ø–∏–π
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—ç–∫–∞–ø–∞:\n{e}")

async def handle_barista_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("DEBUG callback triggered")   # ‚Üê –¥–æ–ª–∂–Ω–æ –ø–æ—è–≤–∏—Ç—å—Å—è –≤ –∫–æ–Ω—Å–æ–ª–∏
    query = update.callback_query
    await query.answer()

    data = query.data
    print("DEBUG callback data:", data)  # ‚Üê —É–≤–∏–¥–∏–º, —á—Ç–æ –ø—Ä–∏—à–ª–æ

    if data.startswith('cancel_'):
        # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞—Ä–∏—Å—Ç—É –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await show_barista_main(update)
        # —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∏ –∏—Å—á–µ–∑–ª–∏
        await query.edit_message_text("üîÑ –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –º–µ–Ω—é –±–∞—Ä–∏—Å—Ç—ã...")
async def handle_customer_by_username(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ @username –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'"""
    print("[DEBUG] 1. –≤–æ—à–ª–∏ –≤ handle_customer_by_username")
    username_input = update.message.text.strip().lstrip('@').lstrip('‚Äò').lstrip('‚Äô').lstrip('"').lstrip("'")
    print(f"[DEBUG] 2. username_input='{username_input}'")

    if not username_input:
        print("[DEBUG] 3. username_input –ø—É—Å—Ç–æ–π ‚Äì –≤—ã—Ö–æ–¥–∏–º")
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π @username")
        set_user_state(context, 'admin_customers')
        return

    print("[DEBUG] 4. –∏—â–µ–º –≤ –ë–î...")
    user_data = db.get_user_by_username_exact(username_input)
    print(f"[DEBUG] 5. user_data = {user_data}")

    if user_data:
        print("[DEBUG] 6. user_data –ù–ï –ü–£–°–¢–û–ô ‚Äì –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É")
        customer_id, username, first_name, last_name = user_data
        purchases = db.get_user_stats(customer_id)
        promotion = db.get_promotion()
        required = promotion[2] if promotion else 7

        user_display_name = f"@{username}" if username else f"{first_name} {last_name}".strip() or "–ì–æ—Å—Ç—å"
        text = f"üìã –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\n\nüë§ {user_display_name}\nüìä –ü–æ–∫—É–ø–æ–∫: {purchases}/{required}\nüéØ –î–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ: {max(0, required - purchases)}\n{'üéâ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –Ω–∞–ø–∏—Ç–æ–∫ –¥–æ—Å—Ç—É–ø–µ–Ω!' if purchases >= required else '–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!'}"

        keyboard = [
            [KeyboardButton("‚ûï –ù–∞—á–∏—Å–ª–∏—Ç—å –ø–æ–∫—É–ø–∫—É")],
            [KeyboardButton("‚ûñ –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∫—É–ø–∫—É")],
            [KeyboardButton("üîô –ù–∞–∑–∞–¥")]
        ]
        print("[DEBUG] 7. –æ—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π")
        await update.message.reply_text(text, reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))

        print("[DEBUG] 8. —Å–æ—Ö—Ä–∞–Ω—è—é customer_id –∏ –ø–µ—Ä–µ–∫–ª—é—á–∞—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
        context.user_data['current_customer'] = customer_id
        context.user_data['current_username'] = username or f"{first_name} {last_name}".strip() or "–ì–æ—Å—Ç—å"
        set_user_state(context, 'admin_customer_actions')
        print("[DEBUG] 9. –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏")
        return

    print("[DEBUG] 6. user_data –ü–£–°–¢–û–ô ‚Äì —Å–æ–æ–±—â–∞–µ–º '–Ω–µ –Ω–∞–π–¥–µ–Ω'")
    await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
# ================== –ó–ê–ü–£–°–ö ==================
def main():
    application = Application.builder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(handle_callback_query))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CommandHandler("backup", cmd_backup))
    application.add_handler(CommandHandler("sticker_id", get_sticker_id))
    application.add_handler(MessageHandler(filters.Sticker.ALL, handle_sticker))

    # === –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±—ç–∫–∞–ø (04:00) –∏ —á–∏—Å—Ç–∫–∞ (04:01) ===
    import threading, schedule, time
    def daily_job():
        while True:
            schedule.run_pending()
            time.sleep(60)

    schedule.every().day.at("04:00").do(db.backup_db)
    schedule.every().day.at("04:01").do(db.cleanup_old_backups, 7)
    threading.Thread(target=daily_job, daemon=True).start()

    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π...")
    application.run_polling()


if __name__ == "__main__":
    main()