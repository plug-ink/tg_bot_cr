import sqlite3
from datetime import datetime
import shutil, os
from pathlib import Path

class Database:
    def __init__(self, db_name='coffee_bot.db'):
        self.conn = sqlite3.connect(db_name, check_same_thread=False)
        self.create_tables()
    
    def create_tables(self):
        cursor = self.conn.cursor()
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–∫–ª–∏–µ–Ω—Ç—ã)
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                first_name TEXT,
                last_name TEXT,
                purchases_count INTEGER DEFAULT 0,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –ë–∞—Ä–∏—Å—Ç—ã
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS baristas (
                username TEXT PRIMARY KEY,
                first_name TEXT,
                last_name TEXT,
                is_active BOOLEAN DEFAULT 1,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫—Ü–∏–∏
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS promotions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT DEFAULT '–ö–∞–∂–¥—ã–π 7-–π –Ω–∞–ø–∏—Ç–æ–∫ –±–µ—Å–ø–ª–∞—Ç–Ω–æ',
                required_purchases INTEGER DEFAULT 7,
                description TEXT,
                is_active BOOLEAN DEFAULT 1
            )
        ''')

        # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∫ .env)
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS admins (
                user_id INTEGER PRIMARY KEY,
                is_active BOOLEAN DEFAULT 1,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        cursor.execute('''
            INSERT OR IGNORE INTO promotions (name, required_purchases, description) 
            VALUES ('–ö–∞–∂–¥—ã–π 7-–π –Ω–∞–ø–∏—Ç–æ–∫ –±–µ—Å–ø–ª–∞—Ç–Ω–æ', 7, '–ü–æ–∫–∞–∂–∏—Ç–µ QR-–∫–æ–¥ –ø—Ä–∏ –∫–∞–∂–¥–æ–π –ø–æ–∫—É–ø–∫–µ')
        ''')
        
        self.conn.commit()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

    # === –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò ===
    def get_or_create_user(self, user_id, username="", first_name="", last_name=""):
        cursor = self.conn.cursor()
        cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
        user = cursor.fetchone()
        
        if not user:
            cursor.execute('''
                INSERT INTO users (user_id, username, first_name, last_name) 
                VALUES (?, ?, ?, ?)
            ''', (user_id, username, first_name, last_name))
            self.conn.commit()
        return user_id

    def get_user_stats(self, user_id):
        cursor = self.conn.cursor()
        cursor.execute('SELECT purchases_count FROM users WHERE user_id = ?', (user_id,))
        result = cursor.fetchone()
        return result[0] if result else 0
    def update_user_purchases(self, user_id, change):
        """–ò–∑–º–µ–Ω—è–µ—Ç —Å—á—ë—Ç—á–∏–∫ –ø–æ–∫—É–ø–æ–∫ (+1 –∏–ª–∏ -1) —Å –∞–≤—Ç–æ-–æ–±–Ω—É–ª–µ–Ω–∏–µ–º –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –∞–∫—Ü–∏–∏"""
        promo = self.get_promotion()
        required = promo[2] if promo else 7

        cursor = self.conn.cursor()
    # —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        cursor.execute('SELECT purchases_count FROM users WHERE user_id = ?', (user_id,))
        current = cursor.fetchone()[0]

    # –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        new_val = max(0, current + change)

    # –µ—Å–ª–∏ –î–û–ë–ê–í–õ–Ø–ï–ú +1 –∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ ‚Üí –æ–±–Ω—É–ª—è–µ–º
        if change == +1 and new_val >= required:
            cursor.execute('UPDATE users SET purchases_count = 0 WHERE user_id = ?', (user_id,))
            self.conn.commit()
            return 0

         # –∏–Ω–∞—á–µ ‚Äì –ø—Ä–æ—Å—Ç–æ –ø–∏—à–µ–º –Ω–æ–≤–æ–µ —á–∏—Å–ª–æ
        cursor.execute('UPDATE users SET purchases_count = ? WHERE user_id = ?', (new_val, user_id))
        self.conn.commit()
        return new_val

    def search_user_by_username(self, username):
        """–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username"""
        cursor = self.conn.cursor()
        cursor.execute('SELECT * FROM users WHERE username LIKE ?', (f'%{username}%',))
        return cursor.fetchall()

    def get_user_by_username_exact(self, username: str):
        cursor = self.conn.cursor()
        cursor.execute('SELECT user_id, username, first_name, last_name FROM users WHERE username = ? LIMIT 1', (username,))
        return cursor.fetchone()

    # === –ë–ê–†–ò–°–¢–´ ===
    def is_user_barista(self, username):
        if not username:
            return False
        cursor = self.conn.cursor()
        cursor.execute('SELECT * FROM baristas WHERE username = ? AND is_active = 1', (username,))
        return cursor.fetchone() is not None

    def add_barista(self, username, first_name="", last_name=""):
        cursor = self.conn.cursor()
        cursor.execute('''
            INSERT OR REPLACE INTO baristas (username, first_name, last_name) 
            VALUES (?, ?, ?)
        ''', (username, first_name, last_name))
        self.conn.commit()
        return True

    def remove_barista(self, username):
        cursor = self.conn.cursor()
        cursor.execute('UPDATE baristas SET is_active = 0 WHERE username = ?', (username,))
        self.conn.commit()
        return cursor.rowcount > 0

    def get_all_baristas(self):
        cursor = self.conn.cursor()
        cursor.execute('SELECT * FROM baristas WHERE is_active = 1')
        return cursor.fetchall()
    
    def clean_invalid_baristas(self):
        """–£–¥–∞–ª—è–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –±–∞—Ä–∏—Å—Ç–∞"""
        cursor = self.conn.cursor()
        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ username
        invalid_usernames = ['–°–ø–∏—Å–æ–∫', '–£–¥–∞–ª–∏—Ç—å', '–î–æ–±–∞–≤–∏—Ç—å', '–ù–∞–∑–∞–¥', 'üìã –°–ø–∏—Å–æ–∫', '‚ûñ –£–¥–∞–ª–∏—Ç—å', '‚ûï –î–æ–±–∞–≤–∏—Ç—å', 'üîô –ù–∞–∑–∞–¥']
        for username in invalid_usernames:
            cursor.execute('UPDATE baristas SET is_active = 0 WHERE username = ?', (username,))
        self.conn.commit()
        return True

    # === –ê–ö–¶–ò–ò ===
    def get_promotion(self):
        cursor = self.conn.cursor()
        cursor.execute('SELECT * FROM promotions WHERE is_active = 1 LIMIT 1')
        return cursor.fetchone()

    def update_promotion(self, required_purchases=None, description=None, name=None):
        cursor = self.conn.cursor()
        if required_purchases:
            cursor.execute('UPDATE promotions SET required_purchases = ? WHERE is_active = 1', (required_purchases,))
        if description:
            cursor.execute('UPDATE promotions SET description = ? WHERE is_active = 1', (description,))
        if name:
            cursor.execute('UPDATE promotions SET name = ? WHERE is_active = 1', (name,))
        self.conn.commit()

    # === –ê–î–ú–ò–ù–´ ===
    def add_admin(self, user_id: int) -> bool:
        cursor = self.conn.cursor()
        cursor.execute('INSERT OR REPLACE INTO admins (user_id, is_active) VALUES (?, 1)', (user_id,))
        self.conn.commit()
        return True

    def remove_admin(self, user_id: int) -> bool:
        cursor = self.conn.cursor()
        cursor.execute('UPDATE admins SET is_active = 0 WHERE user_id = ?', (user_id,))
        self.conn.commit()
        return cursor.rowcount > 0

    def is_user_admin_db(self, user_id: int) -> bool:
        cursor = self.conn.cursor()
        cursor.execute('SELECT 1 FROM admins WHERE user_id = ? AND is_active = 1', (user_id,))
        return cursor.fetchone() is not None

    def get_all_admins(self):
        cursor = self.conn.cursor()
        cursor.execute('SELECT user_id FROM admins WHERE is_active = 1')
        return [row[0] for row in cursor.fetchall()]
    
        # === –ë–≠–ö–ê–ü ===

    def backup_db(self) -> str:
        """–°–æ–∑–¥–∞—ë—Ç –∫–æ–ø–∏—é –ë–î –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –¥–æ —Ñ–∞–π–ª–∞"""
        os.makedirs('backup', exist_ok=True)
        date_str = datetime.now().strftime('%Y-%m-%d_%H-%M')
        backup_path = f'backup/coffee_bot_{date_str}.db'
        main_db_path = self.conn.cursor().execute('PRAGMA database_list').fetchone()[2]
        shutil.copyfile(main_db_path, backup_path)
        return backup_path
    
    def cleanup_old_backups(self, keep=7):
        """–û—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ keep –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫–æ–ø–∏–π"""
        try:
            files = sorted(Path('backup').glob('coffee_bot_*.db'))
            for f in files[:-keep]:  # —É–¥–∞–ª—è–µ–º –≤—Å—ë, –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö keep
                f.unlink()
        except Exception:
            pass  # –º–æ–ª—á–∏–º, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å
    
    def get_all_users(self):
        cursor = self.conn.cursor()
        cursor.execute('SELECT user_id, username, first_name, last_name, purchases_count FROM users ORDER BY created_at DESC')
        return cursor.fetchall()
    
    def get_all_user_ids(self): 
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ user_id –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏)"""
        cursor = self.conn.cursor()
        cursor.execute('SELECT user_id FROM users')
        return [row[0] for row in cursor.fetchall()]  # ‚Üê –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ ID

    
